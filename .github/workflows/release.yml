name: Moodle Plugin CI

on:
  release:
    types: [ created ]
  push:
    branches: [ main ]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      matrix:
        moodle_version: [ '4.4', '4.5' ]
    env:
      REGISTRY: ghcr.io
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags) - release
        if: github.event_name == 'release'
        id: meta_release
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/projektadler/adler-moodle
          tags: |
            type=raw,value=moodle-${{ matrix.moodle_version }}
            type=raw,value=latest-moodle-${{ matrix.moodle_version }}
            type=semver,pattern={{version}}-moodle-${{ matrix.moodle_version }}
            type=semver,pattern={{major}}.{{minor}}-moodle-${{ matrix.moodle_version }}
            type=semver,pattern={{major}}-moodle-${{ matrix.moodle_version }}
      
      - name: Extract metadata (tags) - branch
        if: github.event_name == 'push'
        id: meta_branch
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/projektadler/adler-moodle
          tags: |
            type=raw,value=${{ github.ref_name }}-moodle-${{ matrix.moodle_version }}

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          build-args: |
            MOODLE_VERSION=${{ matrix.moodle_version }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta_release.outputs.tags || steps.meta_branch.outputs.tags }}

      - name: Prepare release body (description)
        if: github.event_name == 'release'
        id: prep_body
        run: |
          echo "${{ github.event.release.body }}" > changes.md

      - name: Discord notification
        if: github.event_name == 'release'
        uses: appleboy/discord-action@master
        with:
          webhook_id: ${{ secrets.DISCORD_RELEASE_CHANNEL_WEBHOOK_ID }}
          webhook_token: ${{ secrets.DISCORD_RELEASE_CHANNEL_WEBHOOK_TOKEN }}
          username: GitHub Releases
          message: "New release of **${{ github.repository }}**\nVersion: ${{ github.ref_name }} (${{github.event.release.name}})\n<${{ github.event.release.html_url }}>"
          file: changes.md
